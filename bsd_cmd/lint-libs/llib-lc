/* --------------------------------------------------- */
/* | Copyright (c) 1989 MIPS Computer Systems, Inc.  | */
/* | All Rights Reserved.                            | */
/* --------------------------------------------------- */
/* $Header: llib-lc,v 1.6.1.1 90/01/09 22:21:55 wje Exp $ */

/*	@(#)llib-lc	1.44 (Berkeley) 10/22/87	*/

/* LINTLIBRARY */

#include <sys/types.h>
#include <sys/time.h>

#include <sys/wait.h>
#include <sys/dir.h>
#include <sys/resource.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/timeb.h>
#include <sys/times.h>
#include <sys/uio.h>
#include <sys/utsname.h>
#include <sys/vtimes.h>

#include <machine/hwconf.h>
#include <netinet/in.h>

#include <netns/ns.h>

#include <arpa/inet.h>
#include <arpa/nameser.h>

#include <fstab.h>
#include <grp.h>
#include <ndbm.h>
#include <netdb.h>
#include <nlist.h>
#include <pwd.h>
#include <resolv.h>
#include <setjmp.h>
#include <sgtty.h>
#include <signal.h>
#include <stdio.h>
#include <ttyent.h>
#include <utmp.h>
#include <varargs.h>
#include <mntent.h>
#include <rpc/rpc.h>

	/***	SECTION 2	***/
int	errno;

int	accept(s, a, l) struct sockaddr *a; int *l; { return s; }
int	access( p, m) char *p; { return 0; }
int	acct(f) char *f; { return 0;}
int	adjtime(delta, odelta) struct timeval *delta, *odelta; { return 0; }
	async_daemon() { ; }
int	bind(s, n, l) struct sockaddr *n; { return 0; }
char	*brk(a) char *a; { return(a); }
	cachectl(a,n,o) char *a; int n,o; { return 0; }
	cacheflush(a,n,c) char *a; int n,c; { return 0;}
int	chdir(s) char *s; { return(0); }
int	chmod(s, m) char *s; { return(0); }
int	chown(s, u, g) char *s; { return(0); }
int	chroot( d ) char *d; { return 0; }
int	close(f) { return(0); }
int	connect( s, n, l) struct sockaddr *n; { return 0; }
int	dup(f) { return(f); }
int	dup2( o, n) { return o; }
	execve(s, v, e) char *s, *v[], *e[]; {;}
	_exit(s) {;}
int	fchmod(f, m) { return(0); }
int	fchown(f, u, g) { return(0); }
int	fcntl(f, c, a) { return (0); }
	fixade(x) int x; { return 0;}
int	flock( f, o ) { return 0; }
int	fork() { return(0); }
int	fp_sigintr(x) int x; { return 0; }
int	fsync( f ) { return 0; }
int	fstat(f, b) struct stat *b; { return(0); }
int	fstatfs(f,b,l,t) int f; struct statfs *b; int l,t; { return 0; }
int	ftruncate( d, l) off_t l; { return 0;}
int	getdirentries(f,b,n,x) int f; char *b; int n; long *x; { return 0;}
	getdomainname(n,l) char *n; int l; { return 0; }
int	getdtablesize() { return 20 ; }
gid_t	getegid() { return((gid_t)1); }
uid_t	geteuid() { return((uid_t)1); }
gid_t	getgid() { return((gid_t)1); }
int	getgroups( n, g ) int n, *g; { return 0; }
long	gethostid() { return 1L; }
int	gethostname( n, l ) char *n; int l; { return 0 ;}
int	getitimer( w, v ) struct itimerval *v; { return 0; }
int	getpagesize() { return 1; }
int	getpeername(s, n, l) struct sockaddr *n; int *l; { return (0); }
int	getpgrp(p) { return 1; }
int	getpid() { return(1); }
int	getppid() { return(1); }
int	getpriority( w, who) { return 1;}
int	getrlimit( res, rip) struct rlimit *rip; { return 0;}
int	getrusage( res, rip) struct rusage *rip; { return 0;}
int	getsockname(s, name, namelen) struct sockaddr *name; int *namelen; { return(0); }
int	getsockopt( s, level, opt, buf, len ) char *buf; int *len; { return 0;}
int	gettimeofday( t, z ) struct timeval *t; struct timezone *z; { return 0;}
uid_t	getuid() { return((uid_t)1); }
	hwconf(o,c) int o; struct hw_config *c; { return 0; }
int	ioctl( d, r, p) u_long r; char *p; { return 0;}
int	kill(p, s) { return(0); }
int	killpg( pg, s) { return 0;}
	kopt(o,v,s) char *o; int v,s; { return 0; }
int	link(a, b) char *a, *b; { return(0); }
int	listen( s, b ){ return 0; }
off_t	lseek(f, o, d) off_t o; { return(o); }
int	lstat(s, b) char *s; struct stat *b; { return(0); }
#ifdef notdef
int	madvise( a, l, b ) char * a; int l, b; { return 0;}
int	mincore( a, l, v ) char * a; int l; char *v; { return 0; }
#endif
	mipsfpu(x) int x; { return 0; }
int	mkdir( p, m ) char *p; { return 0; }
int	mknod(n, m, a) char *n; { return(0); }
int	mmap( a, l, p, s, f, o ) char * a; off_t o; { return 0;}
#ifdef notdef
int	mount(s, n, f) char *s, *n; { return(0); }
int	mprotect( a, l, p) char * a; { return 0;}
int	mremap( a, l, p, s, f) char * a, f; { return 0;}
#endif
int	munmap( a, l) char * a; { return 0;}
	nfssvc(s) int s; { ; }
	/* VARARGS2 */
int	open(f, m, stuff) char *f; { return(0); }
int	pipe(f) int f[2]; { return(0); }
	profil(b, s, o, i) char *b; {;}
int	ptrace(r, p, a, d) int *a; { return(0); }
int	quota(c, u, a, ad) char *ad; { return(0); }
	quotactl(c,s,u,a) int c; char *s; int u; caddr_t a;{ return 0;}
int	read(f, b, l) char *b; { return(l); }
int	readv( d, v, l) struct iovec *v; { return l; }
int	readlink( p, b, s ) char *p, *b; { return 1; }
	reboot( h ) {;}
int	recv( s, b, l, f ) char *b; { return l ; }
int	recvfrom( s, b, l, f, fr, fl ) char *b; struct sockaddr *fr; int *fl;
		{ return l; }
int	recvmsg( s, m, f ) struct msghdr m[]; { return 1; }
int	rename( f, t ) char *f, *t; { return 0;}
int	rmdir( p ) char *p; { return 0;}
char	*sbrk(i) { return((char *)0); }
int	select( n, r, w, e, t ) fd_set *r, *w, *e; struct timeval *t; { return n; }
int	send( s, m, l, f )  char *m; { return l; }
int	sendto( s, m, l, f, t, tl ) char *m; struct sockaddr *t; { return l; }
int	sendmsg( s, m, l) struct msghdr m[]; { return l; }
	setdomainame(n,l) char *n; int l; { return 0; }
int	setgroups( n, g) int *g; { return 0; }
int	sethostid( h ) long h; { return 0;}
int	sethostname( n, l ) char *n; int l; { return 0 ;}
int	setitimer( w, v, ov ) struct itimerval *v, *ov; { return 0; }
int	setpgrp( g, pg) { return 0; }
int	setpriority( w, who, pri ) { return 1;}
int	setquota(s, f) char *s, *f; { return 0; }
int	setregid( r, e) int r, e; { return 0; }
int	setreuid( r, e) int r, e; { return 0; }
int	setrlimit( res, rip) struct rlimit *rip; { return 0;}
	/* VARARGS */
int	setsockopt( s, level, opt, buf, len ) char *buf; { return 0;}
int	settimeofday( t, z ) struct timeval *t; struct timezone *z; { return 0;}
int	shutdown( s, h ){ return 0;}
int	(*signal(c, f))() int (*f)(); { return(f); }
int	sigvec(c, f, m) struct sigvec *f, *m; { return 0; }
int	sigblock(m) { return (m); }
int	sigsetmask(m) { return (m); }
	sigpause(m) { ; }
int	sigreturn(scp) struct sigcontext *scp; { return -1; }
int	sigstack(ss, oss) struct sigstack *ss, *oss; { return 0 ; }
int	socket( a, t, p) {return 1;}
int	socketpair( d, t, p, s ) int s[2]; { return 0; }
int	stat(s, b) char *s; struct stat *b; { return(0); }
int	statfs(p,b,l,t) char *p;struct statfs *b; int l,t; { return 0 ; }
#ifdef notdef
char *	stk( a ) char * a; { return a; }
char *	sstk( a ) int a; { return (char *)0; }
#endif
int	swapon( s ) char *s; { return 0;}
int	symlink( t, f) char *t, *f; { return 0;}
	sync(){;}
	/* VARARGS */
	syscall(n) {return 0;}
int	truncate( p, l) char *p; off_t l; { return 0;}
int	umask( n ) { return n; }
int	umount(s) char *s; { return 0; }
	uname(u) struct utsname *u; { return 0; }
int	unlink(s) char *s; { return(0); }
int	utimes( f, t ) char *f; struct timeval t[2]; { return 0 ;}
int	vfork() { return(0); }
	vhangup() { ; }
int	wait(s) union wait *s; { return(1); }
int	wait3( s, o, r) union wait *s; struct rusage *r; { return 1;}
int	write(f, b, l) char *b; { return(l); }
int	writev( f, v, l) struct iovec *v; { return l; }


	/***	SECTION 3	***/

struct qelem {	/* this should really be defined in an include file */
	struct qelem	*q_forw;
	struct qelem	*q_back;
	char		data[1];
}

	/* antique system calls and unclassified */
	_longjmp( e, v) jmp_buf e; {;}
int	_setjmp(e) jmp_buf e; { return(0); }
	abort() {;}
int	abs(i) int i; { return(i); }
	addexportent(f,d,o) FILE *f; char *d,*o; { return 0; }
	addmntent( f, m) FILE *f; struct mntent *mnt; { return 0;}
int	alarm(s) unsigned s; { return(s); }
char *	alloca(s) unsigned s; { return (char *)0;}
	alphasort( d1, d2) struct direct **d1, **d2; { return 0;}
char *	asctime(t) struct tm *t; { return(""); }
double	atof(s) char *s; { return(1.); }
int	atoi(s) char *s; { return 1;   }
long	atol(s) char *s; { return 1L;   }
double  atod(s) char *s; { return ((double)1.); }
int	bcmp(b1, b2, length) char *b1, *b2; { return 0; }
	bcopy(src, dst, length) char *src, *dst; { ; }
	bindresvport(s, o) int s; struct sockaddr_in *sin; { return 0; }
	bzero(b, length) char *b; { ; }
char *	calloc(n,s) unsigned n, s; { static char c[1]; return(c); }
int	cbc_crypt(k,b,l,m,iv) char *k,*b,*iv;unsigned l,m; {return 0;}
	cfree(p,n,s) char *p; unsigned n,s; { ; }
void	closedir( p ) DIR *p; {}
	closelog() {}
int	creat(s, m) char *s; { return(0); }
char *	crypt(k,s) char *k, *s; { return(""); }
char *	ctime(c) long *c;{ return(""); }
char	_ctype_[];
DBM *	dbm_open(file, flags, mode) char *file; { return (DBM *) 0; }
void	dbm_close(db) DBM *db; { ; }
datum	dbm_fetch(db, key) DBM *db; datum key; { return key; }
int	dbm_store(db, key, cont, flags) DBM *db; datum key, cont; { return 0; }
int	dbm_delete(db, key) DBM *db; datum key; { return 0; }
datum	dbm_firstkey(db) DBM *db; { datum key; return key; }
datum	dbm_nextkey(db) DBM *db; { datum key; return key; }
	dn_comp(e,c,l,d,n) char *e,c;int l; char **d,**n;{ return 0;}
	dn_expand(m,e,c,x,l)char *m,*e,*c,*e; int l; { return 0;}
int	ebc_crypt(k,b,l,m) char *k,*b;unsigned l,m; {return 0;}
char *	ecvt(v, n, d, s) double v; int *d, *s; { return(""); }
	emulate_branch(s,b) struct sigcontext *s; unsigned long b; { ; }
	execute_branch(b) unsigned long b; { ; }
	encrypt(s, i) char *s; {}
void	endexportent(f) FILE *f; { ; }
int	endfsent() { return 0; }
int	endgrent() { ; }
int	endmntent(m) FILE *m; { return 0;}
	endhostent() { ; }
	endnetent() { ; }
	endnetgrent() { ; }
	endprotoent() { ; }
	endpwent() {}
	endrpcent() { ; }
	endservent() { ; }
	endttyent() { ; }
	endusershell() { ; }
	endutent() { ; }
char **	environ;
struct ether_addr * ether_aton(s) char *s; { return (struct ether_addr *)0;}
	ether_hostton(h, e) char *h; struct ether_addr *e; { return 0;}
	ether_line(s, e, h) char *s; struct ether_addr *e; char *h; { return 0;}
char *	ether_ntoa(e) struct ether_addr *e; { return (" "); }
	ether_ntohost(h,e) char * host; struct ether_addr *e; { return 0; }
	/* VARARGS */
	execl(f, a) char *f, *a; {;}
	/* VARARGS */
	execle(f, a) char *f, *a; {;}
	/* VARARGS */
	execlp(f, a) char *f, *a; {;}
	execv(s, v) char *s, *v[]; {;}
	execvp(s, v) char *s, *v[]; {;}
	exect(s, v, e) char *s, *v[], *e[]; {;}
	exit(s) {;}
char *	fcvt(v, n, d, s) double v; int *d, *s; { return(""); }
int	ffs(i) { return i; }
	free(p) char *p; {;}
double	frexp( v, e) double v; int *e; { return v; }
	ftime(tp) struct timeb *tp; { ; }
char *	gcvt(v, n, b) double v; char *b; { return(""); }
struct disklabel *	getdiskbyname(name) char *name; { return (struct disklabel *) 0; }
char *	getenv( n ) char *n; { return n; }
struct exportent * getexportent(f) FILE *f; { return (struct exportent *)0;}
char *	getexportopt(x,o) struct exportent *x; char *o;{ return o;}
struct fstab *	getfsent() { return (struct fstab *)NULL; }
struct fstab *	getfsspec( n ) char *n; { return (struct fstab *)NULL; }
struct fstab *	getfsfile( n ) char *n; { return (struct fstab *)NULL; }
struct fstab *	getfstype( t ) char *t; { return (struct fstab *)NULL; }
struct group *	getgrent() { return (struct group *)NULL; }
struct group *	getgrgid( n ) { return (struct group *)NULL; }
struct group *	getgrnam( n ) char *n; { return (struct group *)NULL; }
struct hostent *	gethostbyaddr(addr, len, type) char *addr; { return (struct hostent *) 0; }
struct hostent *	gethostbyname(name) char *name; { return (struct hostent *) 0; }
struct hostent *	gethostent() { return (struct hostent *) 0; }
char *	getlogin(){ return " "; }
struct mntent * getmntent(m) FILE *m; { return (struct mntent *)0; }
struct netent *	getnetbyaddr(net, type) { return (struct netent *) 0; }
struct netent *	getnetbyname(name) char *name; { return (struct netent *) 0; }
struct netent *	getnetent() { return (struct netent *) 0; }
	getnetgrent(m,n,d) char **m,**n,**d; { return 0; }
int	getopt(argc, argv, optstr) char **argv, *optstr; { return EOF; }
char *	getpass( n ) char *n ; { return n; }
struct protoent *	getprotobyname(name) char *name; { return (struct protoent *) 0; }
struct protoent *	getprotobynumber(proto) { return (struct protoent *) 0; }
struct protoent *	getprotoent() { return (struct protoent *) 0; }
int	getpw( u, b) char *b;  { return 0; }
struct passwd *	getpwent() { return (struct passwd *)NULL; }
struct passwd *	getpwuid( n ) { return (struct passwd *)NULL; }
struct passwd *	getpwnam( n ) char *n; { return (struct passwd *)NULL; }
struct rpcent * getrpcbyname(n) char *n; { return (struct rpcent *)0; }
struct rpcent * getrpcbynumber(n) int n; { return (struct rpcent *)0; }
struct rpcent * getrpcent() { return (struct rpcent *)0; }
struct servent *	getservbyname(name, proto) char *name, *proto; { return (struct servent *) 0; }
struct servent *	getservbyport(port, proto) char *proto; { return (struct servent *) 0; }
struct servent *	getservent() { return (struct servent *) 0; }
struct ttyent *	getttyent() { return (struct ttyent *) 0; }
struct ttyent *	getttynam(name) char *name; { return (struct ttyent *) 0; }
struct utmp * getutent() { return (struct utmp *) 0; }
struct utmp * getutid(e) struct utmp *e; { return e; }
struct utmp * getutline(e) struct utmp *e; { return e; }
char *	getusershell() { return (char *) 0; }
char *	getwd(pathname) char *pathname; { return pathname; }
struct	tm *	gmtime(c) long *c; { return gmtime(c); }
int	gtty(f, b) struct sgttyb *b; { return(0); }
char *	hasmntopt(m, o) struct mntent *m; char *o; { return " ";}
	herror(s) char *s; { ; }
char *	hostalias(s) char *s; { return s; }
#ifndef htonl
unsigned long htonl(hostlong) u_long hostlong; { return hostlong; }
#endif htonl
#ifndef htons
unsigned short htons(hostshort) u_short hostshort; { return hostshort; }
#endif htons
char *	index(s, c) char *s, c; { return s; }
u_long	inet_addr(cp) char *cp; { return 0L; }
u_long	inet_lnaof(in) struct in_addr in; { return 0L; }
u_long	inet_netof(in) struct in_addr in; { return 0L; }
struct in_addr	inet_makeaddr(net, host) { struct in_addr in; return in; }
u_long	inet_network(cp) char *cp; { return 0L; }
char *	inet_ntoa(in) struct in_addr in; { return (char *) 0; }
int	initgroups(uname, agroup) char *uname; { return 0; }
char *	initstate( s, st, n) unsigned s; char *st; { return st; }
	innetgr(g,m,n,d) char *g,*m,*n,*d; { return 0; }
	insque(elem, pred) struct qelem *elem, pred; { ; }
int	isatty(f) { return 1; }
double	ldexp( v, e) double v; { return v; }
	lockf(f,x,l) long l; { ; }
	longjmp( e, v) jmp_buf e; {;}
	longjmperror() {;}
struct	tm *localtime(c) long *c; { return localtime(c); }
char *	malloc(n) unsigned n; {static char c; return(&c);}
char *	memccpy(t, f, c, n) char *t, *f; { return t; }
char *	memchr(s, c, n) char *s; { return s; }
int	memcmp(s1, s2, n) char *s1, *s2; { return 0; }
char *	memcpy(t, f, n) char *t, *f; { return t; }
char *	memset(s, c, n) char *s; { return s; }
char *	mktemp(p) char *p; { return(p);}
int	mkstemp(p) char *p; { return(0);}
double	modf( v, p ) double v, *p; { return v; }
	moncontrol(mode) { ; }
	monitor(l, h, b, s, n) int (*l)(), (*h)(); short *b; {}
	monstartup( l, h) int (*l)(), (*h)(); {;}
int	nice(incr) { return 0; }
int	nlist( f, n) char *f; struct nlist n[]; { return (0);}
struct ns_addr	ns_addr(name) char *name; { struct ns_addr ns; return ns; }
char *	ns_ntoa(addr) struct ns_addr addr; { return (char *) 0; }
#ifndef ntohl
u_long	ntohl(netlong) u_long netlong; { return netlong; }
#endif ntohl
#ifndef ntohs
u_short	ntohs(netshort) u_short netshort; { return netshort; }
#endif ntohs
struct tm * offtime(c, o) time_t c; long o; { return (struct tm *)0;}
DIR *	opendir( f ) char *f; { return (DIR *)NULL; }
	openlog(s, f, l) char *s; {}
char *	optarg;
int	optind;
	pause() {;}
	perror(s) char *s; {}
	psignal(sig, s) unsigned sig; char *s; {}
struct utmp * pututline(e) struct utmp *e; { return e; }
	qsort( b, n, w, c ) char *b; int (*c)(); {;}
int	rand(){ return 1; }
long	random() { return 1L; }
int	rcmd(a, rp, lu, ru, c, f) char **a, *lu, *ru, *c; u_short rp; int *f; { return 0; }
char *	re_comp(s) char *s ; { return s; }
int	re_exec(s) char *s ; { return 1; }
struct direct *	readdir( p ) DIR *p; { return (struct direct *)NULL; }
char *	realloc(p, n) char *p; unsigned n; { static char c[1]; return(c);}
char *  realpath(n,l) char *n, *l; { return n; }
	remque(elem) struct qelem *elem; { ; }
	remexportent(f,d) FILE *f; char *d; { return 0; }
	res_init() { return 0; }
	res_mkquery(o,d,c,t,a,l,n,b,m) int o; char *d; int c,t; char *a;int l; struct rrec *n; char *b;int m; { return 1;}
	res_query(n,c,t,a,l) char *n;u_char *a; int c,t,l; {return 0;}
	res_querydomain(n,d,c,t,a,l) char *n,*d;u_char *a; int c,t,l; {return 0;}
	res_search(n,c,t,a,l) char *n;u_char *a; int c,t,l; {return 0;}
	res_send(m,l,a,n) char *m, *a; int l,n; {return 0;}
int	rexec(a, rp, n, p, c, f) char **a, *n, *p, *c; u_short rp; int *f; { return 0; }
char *	rindex(s, c) char *s, c; { return s; }
int	rresvport(p) int *p; { return 0; }
int	ruserok(rh, su, ru, lu) char *rh, *ru, *lu; { return 0; }
int	scandir(d, n, s, c) char *d; struct direct *(*n[]); int (*s)(),(*c)();
		{ return 1; }
void	seekdir( p, l) DIR *p; long l; {}
int	setegid(egid) gid_t egid; { return 0; }
int	seteuid(euid) uid_t euid; { return 0; }
FILE *	setexportent() { return (FILE *)0; }
int	setfsent() { return 0; }
int	setgrent() { return 0; }
int	setgid(g) gid_t g; { return(0); }
	sethostent(stayopen) { ; }
	sethostfile(name) char *name; { ; }
int	setjmp(e) jmp_buf e; { return(0); }
	setkey(k) char *k; {}
int	setlogmask(m) { return(0); }
FILE *	setmntent(f,x) char *f, *x; { return (FILE *)0; }
	setnetent(stayopen) { ; }
	setnetgrent(g) char *g; { ; }
	setprotoent(stayopen) { ; }
	setpwent() {}
	setpwfile(file) char *file; {}
int	setrgid(rgid) gid_t rgid; { return 0; }
	setrpcent(f) int f; { ; }
int	setruid(ruid) uid_t ruid; { return 0; }
	setservent(stayopen) { ; }
char *	setstate( st ) char *st; { return st; }
	setttyent() { ; }
int	setuid(u) uid_t u; { return(0); }
	setusershell() { ; }
	setutent() { ; }
int	siginterrupt(sig, flag) { return 0; }
	sleep(i) unsigned i; {}
int	srand(s){ return s; }
	srandom(x) unsigned x; { ; }
char *	strcat(a, b) char *a, *b; { return a; }
char *	strcatn(a, b, n) char *a, *b; { return a;}
char *	strchr(s, c) char *s, c; { return s; }
int	strcmp(a, b) char *a, *b; { return(1); }
int	strcasecmp(a, b) char *a, *b; { return(1); }
int	strcmpn(a, b, n) char *a, *b; { return(1); }
char *	strcpy(a, b) char *a, *b; { return a; }
char *	strcpyn(a, b, n) char *a, *b; { return a; }
int	strcspn(s, set) char *s, *set; { return(0); }
int	strlen(s) char *s; { return(1); }
char *	strncat(a, b, n) char *a, *b; { return a;}
int	strncmp(a, b, n) char *a, *b; { return(1); }
int	strncasecmp(a, b, n) char *a, *b; { return(1); }
char *	strncpy(a, b, n) char *a, *b; { return a; }
char *	strpbrk(s, brk) char *s, *brk; { return s; }
char *	strrchr(s, c) char *s, c; { return s; }
int	strspn(s, set) char *s, *set; { return(0); }
char *	strtok(s, sep) char *s, *sep; { return s; }
long	strtol(s, p, b) char *s; char **p; { return (long)0; }
double	strtod(p, s) char *p; char **s; { return ((double)1.); }
int	stty(f, b) struct sgttyb *b; { return(0); }
	swab( f, t, n) char *f, *t; {;}
	/* VARARGS2 */
	syslog(l, f) char *f; {}
char *	sys_errlist[];
char *	sys_siglist[];
int	sys_nerr;
int	system(s) char *s; { return(0); }
long	tell(f) { return((long)0); }
long	telldir( p ) DIR *p; { return 1L; }
char *	tempnam(d, p) char *d, *p; { return d; }
long	time(t) long *t; { return( 0L );}
int	times(tmsp) struct tms *tmsp; { return 0; }
char *	timezone( z, d ){ return (char *)0; }
FILE *	tmpfile() { return (FILE *)0; }
char *	tmpnam(s) char *s; { return s; }
char *	ttyname(f) { return " "; }
int	ttyslot() { return 1; }
void	tzset() { ; }
unsigned	ualarm(value, interval) unsigned value, interval; { return 0; }
void	unsetenv(s) char *s; { ; }
	usleep(useconds) unsigned useconds; { ; }
int	utime(name, timep) char *name; time_t *timep; { return 0; }
	utmpname(n) char *n; { ; }
char *	valloc(s) unsigned s; { return malloc(s); }
int	vlimit(limit, value) { return 0; }
int	vtimes(par, ch) struct vtimes *par, *ch; { return 0; }

	/* standard I/O library */

#undef clearerr
void	clearerr(s) FILE *s; { ; }
int	fclose(f) FILE *f; {return(0);}
FILE *	fdopen(fd, m) char *m; { return(stdin);}
#undef feof
int	feof(f) FILE *f; { return(0); }
#undef ferror
int 	ferror(f)FILE *f; { return(0); }
int	fflush(f) FILE *f; {return(0);}
int	fgetc(f)  FILE *f; {return 0; }
char *	fgets( s, l, f ) char *s; FILE *f; { return(s); }
int	_filbuf( f ) FILE *f; { return 0; }
#undef fileno
int	fileno(f) FILE *f; {return 0; }
int	_flsbuf( c, f ) unsigned char c; FILE *f; { return 0; }
FILE *	fopen(s,m) char *s, *m; { return(stdin); }
	/* VARARGS2 */
	fprintf( f, s ) FILE *f; char *s; {;}
int	fputc(c, f) char c; FILE *f; {return 0; }
	fputs(s,f) char *s; FILE *f; {;}
int	fread( p, s, n, f ) char *p; FILE *f; {return(1);}
FILE *	freopen(s, m, f) char *s, *m; FILE *f; { return(stdin); }
	/* VARARGS2 */
	fscanf( f, s ) FILE *f; char *s; {return(1);}
int	fseek(f, o, p) FILE *f; long o; { return(0); }
long	ftell(f) FILE *f; { return(0L); }
int	fwrite( p, s, n, f ) char *p; FILE *f; {return(0);}
#ifndef getc
int	getc(f) FILE *f; { return EOF; }
#endif getc
int	getw(f) FILE *f; { return 0;}
char *	gets( s ) char *s; { return(s); }
struct _iobuf _iob[];
int	pclose( f ) FILE *f; { return 0; }
FILE *	popen( c, t ) char *c, *t; { return(stdin); }
	/* VARARGS1 */
	printf( s ) char *s; {;}
	puts(s) char *s;{;}
#ifndef putc
int	putc(c, f) char c; FILE *f; { return 0; }
#endif putc
int	putw(w, f) FILE *f; { return 0;}
	rewind(f) FILE *f; {;}
	/* VARARGS1 */
	scanf( f ) char *f; {return(1); }
	setbuf( f, b ) FILE *f; char *b; {;}
	setbuffer( f, b, s ) FILE *f; char *b; {;}
	setlinebuf( f ) FILE *f; {;}
	/* VARARGS2 */
int	sprintf( s, f ) char *s, *f; { return(s);}
	/* VARARGS2 */
	sscanf( s, f ) char *s, *f; { return(1); }
	ungetc( c, f ) FILE *f; {  return(c); }
	vfprintf(f,s,v) FILE *f; char *s; va_list ap; { return 0; }
	vprintf(s,v) char *s; va_list v; { return 0; }
	vsprintf(s,f,v) char *s,*f; va_list ap; { return 0;}

	/* YELLOW PAGES */
#include <rpcsvc/ypclnt.h>
int	yp_all(domain,map,callback) char *domain;char *map;struct ypall_callback *callback; { return 0; }
int	yp_bind(i) char *i; { return (0); }
int	yp_first(id, im, ok, okl, ov, ovl) char *id, *im; char **ok, **ov; int *okl, *ovl; { return (0); }
int	yp_get_default_domain(o) char **o; { return (0); }
int	yp_master(domain,map,master) char *domain,*map;char **master;{return 0;}
int	yp_match(id, im, ik, ikl, ov, ovl) char *id, *im, *ik; char **ov; int *ovl; { return (0); }
int	yp_next(id, im, ik, ikl, ok, okl, ov, ovl) char *id, *im, *ik; char **ok, **ov; int *okl, *ovl; { return (0); }
int	yp_order(domain,map,order) char *domain,*map;unsigned long *order;{return 0;}
char *	yp_service(request,arg)unsigned int request;char *arg;{return (char *)0;}
void	yp_unbind(i) char *i; {}
char *	yperr_string(c) { return (""); }
int	ypprot_err(y)int y;{return 0;}

/* RPC Support */

AUTH * authdes_create(servername, window, syncaddr, ckey)
	char *servername;		/* network name of server */
	u_int window;			/* time to live */
	struct sockaddr *syncaddr;	/* optional addr of host to sync with */
	des_block *ckey;		/* optional conversation key to use*/
{ return (AUTH *)0; }
authdes_getucred(adc, uid, gid, grouplen, groups)
	struct authdes_cred *adc;
	short *uid;
	short *gid;
	short *grouplen;
	int *groups;
{ return 0;}
AUTH * authnone_create() { return (AUTH *)0; }
AUTH * authunix_create(machname, uid, gid, len, aup_gids)
	char *machname;
	int uid;
	int gid;
	int len;
	int *aup_gids;
{ return (AUTH *)0;}
AUTH * authunix_create_default() {return (AUTH *)0;}
callrpc(host, prognum, versnum, procnum, inproc, in, outproc, out)
	char *host;
	xdrproc_t inproc, outproc;
	char *in, *out;
{ return 0; }
typedef bool_t (*resultproc_t)();
enum clnt_stat clnt_broadcast(prog, vers, proc, xargs, argsp, xresults, resultsp, eachresult)
	u_long		prog;
	u_long		vers;
	u_long		proc;
	xdrproc_t	xargs;
	caddr_t		argsp;
	xdrproc_t	xresults;
	caddr_t		resultsp;
	resultproc_t	eachresult;
{ return (enum clnt_stat)0;}
CLIENT * clnt_create(hostname, prog, vers, proto)
	char *hostname;
	unsigned prog;
	unsigned vers;
	char *proto;
{ return (CLIENT *)0; }
char * clnt_sperror(rpch, s) CLIENT *rpch; char *s; {return " ";}
void clnt_perror(rpch, s) CLIENT *rpch; char *s; { ; }
char * clnt_sperrno(stat) enum clnt_stat stat; { return " "; }
void clnt_perrno(num) enum clnt_stat num; { ; }
char * clnt_spcreateerror(s) char *s; { return " "; }
void clnt_pcreateerror(s) char *s;{ ; }
CLIENT * clntraw_create(prog, vers) u_long prog; u_long vers; { return (CLIENT *)0;}
CLIENT * clnttcp_create(raddr, prog, vers, sockp, sendsz, recvsz)
	struct sockaddr_in *raddr;
	u_long prog;
	u_long vers;
	int *sockp;
	u_int sendsz;
	u_int recvsz;
{ return (CLIENT *)0; }
CLIENT * clntudp_bufcreate(raddr, program, version, wait, sockp, sendsz, recvsz)
	struct sockaddr_in *raddr;
	u_long program;
	u_long version;
	struct timeval wait;
	int *sockp;
	u_int sendsz;
	u_int recvsz;
{ return (CLIENT *)0; }
CLIENT * clntudp_create(raddr, program, version, wait, sockp)
	struct sockaddr_in *raddr;
	u_long program;
	u_long version;
	struct timeval wait;
	int *sockp;
{ return (CLIENT *)0; }
void clntudp_destroy(cl) CLIENT *cl; { ; }
get_my_address(addr) struct sockaddr_in *addr; { return 0;}
getnetname(name) char name[1];{return 0;}
host2netname(netname, host, domain)
	char netname[1];
	char *host;
	char *domain;
{ return 0; }
key_decryptsession(remotename, deskey)
	char *remotename;
	des_block *deskey;
{ return 0; }
key_encryptsession(remotename, deskey)
	char *remotename;
	des_block *deskey;
{ return 0; }
key_gendes(key)
	des_block *key;
{ return 0; }
key_setsecret(secretkey) char * secretkey; { return 0; }
netname2host(netname, hostname, hostlen)
	char netname[1];
	char *hostname;
	int hostlen;
{ return 0; }
netname2host(netname, hostname, hostlen)
	char netname[1];
	char *hostname;
	int hostlen;
{ return 0; }
netname2user(netname, uidp, gidp, gidlenp, gidlist)
	char netname[1];
	int *uidp;
	int *gidp;
	int *gidlenp;
	int *gidlist;
{ return 0; }
struct pmaplist * pmap_getmaps(address) struct sockaddr_in *address; {return (struct pmaplist *)0;}
u_short pmap_getport(address, program, version, protocol)
	struct sockaddr_in *address;
	u_long program;
	u_long version;
	u_long protocol;
{ return (u_short) 0; }
enum clnt_stat pmap_rmtcall(addr, prog, vers, proc, xdrargs, argsp, xdrres, resp, tout, port_ptr)
	struct sockaddr_in *addr;
	u_long prog, vers, proc;
	xdrproc_t xdrargs, xdrres;
	caddr_t argsp, resp;
	struct timeval tout;
	u_long *port_ptr;
{ return (enum clnt_stat)0; }
bool_t pmap_set(program, version, protocol, port)
	u_long program;
	u_long version;
	u_long protocol;
	u_short port;
{ return (bool_t)0; }
bool_t pmap_unset(program, version)
	u_long program;
	u_long version;
{ return (bool_t)0; }
registerrpc(prognum, versnum, procnum, progname, inproc, outproc)
	char *(*progname)();
	xdrproc_t inproc, outproc;
{ return 0; }
void rpc_perror(s) char *s; {;}
rtime(addrp, timep, timeout)
	struct sockaddr_in *addrp;
	struct timeval *timep;
	struct timeval *timeout;
{ return 0;}
void svc_getreq(rdfds) int rdfds; { ; }
void svc_getreqset(readfds) fd_set readfds; { ; }
bool_t svc_register(xprt, prog, vers, dispatch, protocol)
	SVCXPRT *xprt;
	u_long prog;
	u_long vers;
	void (*dispatch)();
	int protocol;
{ return (bool_t)0;}
void svc_run() { ; }
bool_t svc_sendreply(xprt, xdr_results, xdr_location)
	SVCXPRT *xprt;
	xdrproc_t xdr_results;
	caddr_t xdr_location;
{ return (bool_t) 0; }
void svc_unregister(prog, vers) u_long prog; u_long vers;{ ; }
void svcerr_auth(xprt, why) SVCXPRT *xprt; enum auth_stat why; { ; }
void svcerr_decode(xprt) SVCXPRT *xprt; { ; }
void svcerr_noproc(xprt) SVCXPRT *xprt; { ; }
void svcerr_noprog(xprt) SVCXPRT *xprt; { ; }
void  svcerr_progvers(xprt, low_vers, high_vers) SVCXPRT *xprt; u_long low_vers; u_long high_vers; { ; }
void svcerr_systemerr(xprt) SVCXPRT *xprt; { ; }
void svcerr_weakauth(xprt) SVCXPRT *xprt; { ; }
SVCXPRT * svcfd_create(fd, sendsize, recvsize) int fd; u_int sendsize; u_int recvsize; { return (SVCXPRT *)0; }
SVCXPRT * svcraw_create() { return (SVCXPRT *)0; }
SVCXPRT * svctcp_create(sock, sendsize, recvsize)
	int sock;
	u_int sendsize;
	u_int recvsize;
{ return (SVCXPRT *)0; }
SVCXPRT * svcudp_bufcreate(sock, sendsz, recvsz)
	int sock;
	u_int sendsz, recvsz;
{ return (SVCXPRT *)0; }
SVCXPRT * svcudp_create(sock)
	int sock;
{ return (SVCXPRT *)0; }
user2netname(netname, uid, domain)
	char netname[1];
	int uid;
	char *domain;
{ return 0; }
void xprt_register(xprt) SVCXPRT *xprt; { ; }
void xprt_unregister(xprt) SVCXPRT *xprt; { ; }

/* XDR Routines */
bool_t
xdr_array(xdrs, addrp, sizep, maxsize, elsize, elproc)
	XDR *xdrs;
	caddr_t *addrp;		/* array pointer */
	u_int *sizep;		/* number of elements */
	u_int maxsize;		/* max numberof elements */
	u_int elsize;		/* size in bytes of each element */
	xdrproc_t elproc;	/* xdr routine to handle each element */
{return (bool_t)0; }
bool_t xdr_bool(xdrs, bp)XDR *xdrs; bool_t *bp; {return (bool_t)0; }
bool_t xdr_bytes(xdrs, cpp, sizep, maxsize) XDR *xdrs; char **cpp; register u_int *sizep; u_int maxsize; {return (bool_t)0; }
bool_t xdr_char(xdrs, cp) XDR *xdrs; char *cp; {return (bool_t)0; }
bool_t xdr_double(xdrs, dp) XDR *xdrs; double *dp; {return (bool_t)0; }
bool_t xdr_enum(xdrs, ep) XDR *xdrs; enum_t *ep;{return (bool_t)0; }
bool_t xdr_float(xdrs, fp) XDR *xdrs; float *fp; {return (bool_t)0; }
void xdr_free(proc, objp) xdrproc_t proc; char *objp; {return (bool_t)0; }
bool_t xdr_int(xdrs, ip) XDR *xdrs; int *ip; {return (bool_t)0; }
bool_t xdr_long(xdrs, lp) XDR *xdrs; long *lp; {return (bool_t)0; }
bool_t xdr_netobj(xdrs, np) XDR *xdrs; struct netobj *np; {return (bool_t)0; }
bool_t xdr_opaque(xdrs, cp, cnt) XDR *xdrs; caddr_t cp; u_int cnt; {return (bool_t)0; }
bool_t xdr_pointer(xdrs,objpp,obj_size,xdr_obj) XDR *xdrs; char **objpp; u_int obj_size; xdrproc_t xdr_obj; {return (bool_t)0; }
bool_t xdr_reference(xdrs, pp, size, proc) XDR *xdrs; caddr_t *pp; u_int size; xdrproc_t proc; {return (bool_t)0; }
bool_t xdr_short(xdrs, sp) XDR *xdrs; short *sp; {return (bool_t)0; }
bool_t xdr_string(xdrs, cpp, maxsize) XDR *xdrs; char **cpp; u_int maxsize; {return (bool_t)0; }
bool_t xdr_u_char(xdrs, cp) XDR *xdrs; char *cp; {return (bool_t)0; }
bool_t xdr_u_int(xdrs, up) XDR *xdrs; u_int *up; {return (bool_t)0; }
bool_t xdr_u_long(xdrs, lp) XDR *xdrs; u_long *lp; {return (bool_t)0; }
bool_t xdr_u_short(xdrs, usp) XDR *xdrs; u_short *usp; {return (bool_t)0; }
bool_t xdr_union(xdrs, dscmp, unp, choices, dfault)
	XDR *xdrs;
	enum_t *dscmp;
	char *unp;
	struct xdr_discrim *choices;
	xdrproc_t dfault;
{return (bool_t)0; }
bool_t xdr_vector(xdrs, basep, nelem, elemsize, xdr_elem)
	XDR *xdrs;
	char *basep;
	u_int nelem;
	u_int elemsize;
	xdrproc_t xdr_elem;	
{return (bool_t)0; }
/* VARARGS */
bool_t xdr_void() {return (bool_t)0; }
bool_t xdr_wrapstring(xdrs, cpp) XDR *xdrs; char **cpp; {return (bool_t)0; }
void xdrmem_create(xdrs, addr, size, op) XDR *xdrs; caddr_t addr; u_int size; enum xdr_op op; {return (bool_t)0; }
void xdrrec_create(xdrs, sendsize, recvsize, tcp_handle, readit, writeit)
	XDR *xdrs;
	u_int sendsize;
	u_int recvsize;
	caddr_t tcp_handle;
	int (*readit)();
	int (*writeit)();
{return (bool_t)0; }
bool_t xdrrec_endofrecord(xdrs, sendnow) XDR *xdrs; bool_t sendnow; {return (bool_t)0; }
bool_t xdrrec_eof(xdrs) XDR *xdrs; {return (bool_t)0; }
bool_t xdrrec_skiprecord(xdrs) XDR *xdrs; {return (bool_t)0; }
void xdrstdio_create(xdrs, file, op) XDR *xdrs; FILE *file; enum xdr_op op; {return (bool_t)0; }
