*#ident	"$Header: kernel.i2000s,v 1.7.1.1 89/11/28 11:43:54 wje Exp $"
*
* KERNEL
*
*FLAG	PREFIX	SOFT	#DEV	DEPENDENCIES
k	-	 -	  -
	
$$$

#include "values.h"
#include "sys/param.h"

#define UTSNAME_MACHINE_TYPE MT_I2000

/*
 * machine_type is a global that is used to index into machine dependent
 *	arrays.
 */

#define RISCOS_MACHINE_TYPE BRDTYPE_I2000S

/*
 * Setup c0 vector table here instead of startup.c for new machines.
 * This seems the cleanest way to specify new level 0 interrupt routine
 * which is also lboot'able.
 *
 * DO NOT MESS WITH THIS: unless you really know what you are doing!
 *
 */

extern timein(), netintr(), iop_intr0(), iop_intr1(), iop_intr2();
extern iop_intr4(), fp_intr(), stray();

#ifdef KGCLOCK
extern prof_intr();
#endif

int  (*c0vec_tbl[8])() = {
	/* softint 1 */		timein,
	/* softint 2 */		netintr,
	/* hardint 3 */		iop_intr0,
	/* hardint 4 */		iop_intr1,
	/* hardint 5 */		iop_intr2,
	/* hardint 6 */		fp_intr,
	/* hardint 7 */		iop_intr4,
	/* hardint 8 */		stray,
};

/*
 * The level 0 generic init routine.  This call is done in os/startup.c
 */

extern int iop_level0();

int (*level0_init)() = iop_level0;
int (*interrupt_init)() = 0;		/* No additional interrupts needed */

/*
 *The following stuff is for streams.
 */
#define NBLK1024 2
#define NBLK512 16
#define NBLK256 16
#define NBLK128 32
#define NBLK16 1024
#define NSTREVENT 25

/*
 * Buffer cache parameters.
 *
 *	    bio_pageshi	- Max number of pages allowed in the cache.
 *	    bio_pageslo	- Min number pruned to during page stealing.
 *
 * The kernel executes the functions
 * bio_pageshi_init() and bio_pageslo_init() at boot time to determine
 * the values for bio_pageshi and bio_pageslo.
 *
 * The kernel executes bio_nbuf_init() at boot time to determine the number
 * of buffer headers to be used.
 */

extern int physmem;

bio_pageslo_init()	{ return max(physmem/10, 256*1024/NBPC); }
bio_pageshi_init()	{ return physmem/2; }
bio_nbuf_init()		{ return max(bio_pageshi_init()*NBPC/(8*1024), 64); }

/*
 * Memory allocation parameters
 */
#define MALLOC_LIMIT (768 * 1024)

/*
 * Add definitions here for modified kernel mode parameters
 * (see kernel_common for common defaults)
 */

#include "kernel_common"

